/*
 * This file is generated by jOOQ.
 */
package jooq.scp_tcg.tables;


import jooq.scp_tcg.Indexes;
import jooq.scp_tcg.Keys;
import jooq.scp_tcg.ScpTcg;
import jooq.scp_tcg.tables.records.DeckRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
            "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Deck extends TableImpl<DeckRecord> {

    private static final long serialVersionUID = -181083628;

    /**
     * The reference instance of <code>scp_tcg.deck</code>
     */
    public static final Deck DECK = new Deck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeckRecord> getRecordType() {
        return DeckRecord.class;
    }

    /**
     * The column <code>scp_tcg.deck.id</code>.
     */
    public final TableField<DeckRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>scp_tcg.deck.name</code>.
     */
    public final TableField<DeckRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>scp_tcg.deck.main</code>.
     */
    public final TableField<DeckRecord, String> MAIN = createField("main", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>scp_tcg.deck.mainType</code>.
     */
    public final TableField<DeckRecord, String> MAINTYPE = createField("mainType", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>scp_tcg.deck.deck</code>.
     */
    public final TableField<DeckRecord, String> DECK_ = createField("deck", org.jooq.impl.SQLDataType.VARCHAR(4095), this, "");

    /**
     * Create a <code>scp_tcg.deck</code> table reference
     */
    public Deck() {
        this(DSL.name("deck"), null);
    }

    /**
     * Create an aliased <code>scp_tcg.deck</code> table reference
     */
    public Deck(String alias) {
        this(DSL.name(alias), DECK);
    }

    /**
     * Create an aliased <code>scp_tcg.deck</code> table reference
     */
    public Deck(Name alias) {
        this(alias, DECK);
    }

    private Deck(Name alias, Table<DeckRecord> aliased) {
        this(alias, aliased, null);
    }

    private Deck(Name alias, Table<DeckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Deck(Table<O> child, ForeignKey<O, DeckRecord> key) {
        super(child, key, DECK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ScpTcg.SCP_TCG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DECK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DeckRecord> getPrimaryKey() {
        return Keys.KEY_DECK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DeckRecord>> getKeys() {
        return Arrays.<UniqueKey<DeckRecord>>asList(Keys.KEY_DECK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Deck as(String alias) {
        return new Deck(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Deck as(Name alias) {
        return new Deck(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(String name) {
        return new Deck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(Name name) {
        return new Deck(name, null);
    }
}
