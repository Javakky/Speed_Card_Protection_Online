/*
 * This file is generated by jOOQ.
 */
package jooq.sys.tables;


import jooq.sys.Sys;
import jooq.sys.tables.records.X$memoryGlobalTotalRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigInteger;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
            "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$memoryGlobalTotal extends TableImpl<X$memoryGlobalTotalRecord> {

    private static final long serialVersionUID = -1418788360;

    /**
     * The reference instance of <code>sys.x$memory_global_total</code>
     */
    public static final X$memoryGlobalTotal X$MEMORY_GLOBAL_TOTAL = new X$memoryGlobalTotal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$memoryGlobalTotalRecord> getRecordType() {
        return X$memoryGlobalTotalRecord.class;
    }

    /**
     * The column <code>sys.x$memory_global_total.total_allocated</code>.
     */
    public final TableField<X$memoryGlobalTotalRecord, BigInteger> TOTAL_ALLOCATED = createField("total_allocated", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(41), this, "");

    /**
     * Create a <code>sys.x$memory_global_total</code> table reference
     */
    public X$memoryGlobalTotal() {
        this(DSL.name("x$memory_global_total"), null);
    }

    /**
     * Create an aliased <code>sys.x$memory_global_total</code> table reference
     */
    public X$memoryGlobalTotal(String alias) {
        this(DSL.name(alias), X$MEMORY_GLOBAL_TOTAL);
    }

    /**
     * Create an aliased <code>sys.x$memory_global_total</code> table reference
     */
    public X$memoryGlobalTotal(Name alias) {
        this(alias, X$MEMORY_GLOBAL_TOTAL);
    }

    private X$memoryGlobalTotal(Name alias, Table<X$memoryGlobalTotalRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$memoryGlobalTotal(Name alias, Table<X$memoryGlobalTotalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> X$memoryGlobalTotal(Table<O> child, ForeignKey<O, X$memoryGlobalTotalRecord> key) {
        super(child, key, X$MEMORY_GLOBAL_TOTAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public X$memoryGlobalTotal as(String alias) {
        return new X$memoryGlobalTotal(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public X$memoryGlobalTotal as(Name alias) {
        return new X$memoryGlobalTotal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$memoryGlobalTotal rename(String name) {
        return new X$memoryGlobalTotal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$memoryGlobalTotal rename(Name name) {
        return new X$memoryGlobalTotal(name, null);
    }
}
