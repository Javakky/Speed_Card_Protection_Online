/*
 * This file is generated by jOOQ.
 */
package jooq.performance_schema.tables;


import jooq.performance_schema.PerformanceSchema;
import jooq.performance_schema.tables.records.StatusByAccountRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.2"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class StatusByAccount extends TableImpl<StatusByAccountRecord> {

    /**
     * The reference instance of <code>performance_schema.status_by_account</code>
     */
    public static final StatusByAccount STATUS_BY_ACCOUNT = new StatusByAccount();
    private static final long serialVersionUID = 1517164951;
    /**
     * The column <code>performance_schema.status_by_account.USER</code>.
     */
    public final TableField<StatusByAccountRecord, String> USER = createField("USER", org.jooq.impl.SQLDataType.CHAR(32), this, "");
    /**
     * The column <code>performance_schema.status_by_account.HOST</code>.
     */
    public final TableField<StatusByAccountRecord, String> HOST = createField("HOST", org.jooq.impl.SQLDataType.CHAR(60), this, "");
    /**
     * The column <code>performance_schema.status_by_account.VARIABLE_NAME</code>.
     */
    public final TableField<StatusByAccountRecord, String> VARIABLE_NAME = createField("VARIABLE_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");
    /**
     * The column <code>performance_schema.status_by_account.VARIABLE_VALUE</code>.
     */
    public final TableField<StatusByAccountRecord, String> VARIABLE_VALUE = createField("VARIABLE_VALUE", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>performance_schema.status_by_account</code> table reference
     */
    public StatusByAccount() {
        this(DSL.name("status_by_account"), null);
    }

    /**
     * Create an aliased <code>performance_schema.status_by_account</code> table reference
     */
    public StatusByAccount(String alias) {
        this(DSL.name(alias), STATUS_BY_ACCOUNT);
    }

    /**
     * Create an aliased <code>performance_schema.status_by_account</code> table reference
     */
    public StatusByAccount(Name alias) {
        this(alias, STATUS_BY_ACCOUNT);
    }

    private StatusByAccount(Name alias, Table<StatusByAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatusByAccount(Name alias, Table<StatusByAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StatusByAccount(Table<O> child, ForeignKey<O, StatusByAccountRecord> key) {
        super(child, key, STATUS_BY_ACCOUNT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatusByAccountRecord> getRecordType() {
        return StatusByAccountRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatusByAccount as(String alias) {
        return new StatusByAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatusByAccount as(Name alias) {
        return new StatusByAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatusByAccount rename(String name) {
        return new StatusByAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatusByAccount rename(Name name) {
        return new StatusByAccount(name, null);
    }
}
